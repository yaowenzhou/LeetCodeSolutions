// https://leetcode.cn/problems/valid-sudoku/

package solutions

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// 这倒题还是很简单的
// map和数组的做法都不够新颖
// 来一个位运算的
// 行和列都好说，关键是区域这里需要根据i和j定位到其所属的区域
// 区域编号等于 i/3*3+j/3 (实在不行可以用if来判断)
func isValidSudoku(board [][]byte) bool {
	// 定义三个数组，分别保存行，列和区域的统计结果
	var row [9]int = [9]int{0, 0, 0, 0, 0, 0, 0, 0, 0}
	var col [9]int = [9]int{0, 0, 0, 0, 0, 0, 0, 0, 0}
	var are [9]int = [9]int{0, 0, 0, 0, 0, 0, 0, 0, 0}
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] == '.' {
				continue
			}
			num := board[i][j] - '0'   // 取得数字
			if row[i]&(1<<num) != 0 || // 判断第i行是否符合规范
				col[j]&(1<<num) != 0 || // 判断第j列是否符合规范
				are[i/3*3+j/3]&(1<<num) != 0 { // 判断区域中的数字是否符合规范
				// 数字重复了，直接返回false
				return false
			}
			// 当前遍历的数字符合要求，将其分别记录到三个数组中
			row[i] |= 1 << num
			col[j] |= 1 << num
			are[i/3*3+j/3] |= 1 << num
		}
	}
	return true
}

func TestIsValidSudoku(t *testing.T) {
	board1 := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	board2 := [][]byte{
		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	valid1 := isValidSudoku(board1)
	valid2 := isValidSudoku(board2)
	assert.Equal(t, true, valid1)
	assert.Equal(t, false, valid2)

}
